import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Array<E> {
	private int size;
	private E data[];
	
	Array(int size){
		this.size = size;
        data = (E[]) new Object[size];
	}
	
	public void set(int position, E o) {
		if (position >= 0&&position < size)
			data[position] = o;
		else
			System.out.println("Ne moze da se vmetne element na dadenata pozicija");
	}

	public E get(int position) {
		if (position >= 0 && position < size)
			return data[position];
		else 
			System.out.println("Ne e validna dadenata pozicija");
		return null;
	}

	public int getLength() {
		return size;
	}
	
	public int find(E o) {
		for (int i = 0; i < size; i++){
			if(o.equals(data[i]))
				return i;
		}
		return -1;
	}

	public void insert(int position, E o) {
		// before all we check if position is within range
		if (position >= 0 && position <= size) {
			// first resize the storage array
			E[] newData = (E[]) new Object[size + 1];
			// copy the data prior to the insertion
			for (int i = 0; i < position; i++)
				newData[i] = data[i];
			// insert the new element
			newData[position] = o;
			// move the data after the insertion
			for (int i = position; i < size; i++)
				newData[i + 1] = data[i];
			// replace the storage with the new array
			data = newData;
			size = size + 1;
		}
	}

	public void delete(int position) {
		// before all we check if position is within range
		if (position >= 0 && position < size) {
			// first resize the storage array
			E[] newData = (E[]) new Object[size - 1];
			// copy the data prior to the delition
			for (int i = 0; i < position; i++)
				newData[i] = data[i];
			// move the data after the deletion
			for (int i = position + 1; i < size; i++)
				newData[i - 1] = data[i];
			// replace the storage with the new array
			data = newData;
			size = size - 1;
		}
	}

	public void resize(int newSize) {
		// first resize the storage array
		E[] newData = (E[]) new Object[newSize];
		// copy the data
		int copySize = size;
		if (newSize < size)
			copySize = newSize;
		for (int i = 0; i < copySize; i++)
			newData[i] = data[i];
		// replace the storage with the new array
		data = newData;
		size = newSize;
	}
	
	public static int brojDoProsek(Array<Integer> niza){
		int sum=0;
		for(int i=0; i<niza.getLength(); i++) {
			sum+=niza.get(i);
		}
		sum=sum/niza.getLength();
		int min=Math.abs(niza.get(0)-sum);
		int index=0;
		
		for(int i=1;i<niza.getLength();i++)
		{
			if(Math.abs(niza.get(i)-sum) < min)
			{
				min = Math.abs(niza.get(i)-sum);
				index = i;
			}
			if(Math.abs(niza.get(i)-sum)==min)
			{
				if( niza.get(i)<niza.get(index) )
				{
					min = Math.abs(niza.get(i)-sum);
					index = i;
				}
			}
        }
		return niza.get(index);
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader stdin = new BufferedReader( new InputStreamReader(System.in)); 
		String s = stdin.readLine();
		int N = Integer.parseInt(s);
		
        //Code here...
		Array<Integer> niza = new Array<Integer>(N);
        
		for(int i=0; i<N; i++) {
			s=stdin.readLine();
            niza.set(i,Integer.parseInt(s));
		}
        
		System.out.println(brojDoProsek(niza));		
	}

}
