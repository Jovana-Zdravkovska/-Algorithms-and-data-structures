import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.Iterator;
 
 
class Graph<E> {
 
    int num_nodes;
    GraphNode<E> adjList[];
 
    @SuppressWarnings("unchecked")
    public Graph(int num_nodes, E[] list) {
        this.num_nodes = num_nodes;
        adjList = (GraphNode<E>[]) new GraphNode[num_nodes];
        for (int i = 0; i < num_nodes; i++)
            adjList[i] = new GraphNode<E>(i, list[i]);
    }
 
    @SuppressWarnings("unchecked")
    public Graph(int num_nodes) {
        this.num_nodes = num_nodes;
        adjList = (GraphNode<E>[]) new GraphNode[num_nodes];
        for (int i = 0; i < num_nodes; i++)
            adjList[i] = new GraphNode<E>(i, null);
    }
 
    int adjacent(int x, int y) {
        return (adjList[x].containsNeighbor(adjList[y])) ? 1 : 0;
    }
 
    void addEdge(int x, int y, float tezina) {
        if (adjList[x].containsNeighbor(adjList[y])) {
            adjList[x].updateNeighborWeight(adjList[y], tezina);
            adjList[y].updateNeighborWeight(adjList[x], tezina);
        } else{
            adjList[x].addNeighbor(adjList[y], tezina);
            adjList[y].addNeighbor(adjList[x], tezina);
        }
    }
 
    void deleteEdge(int x, int y) {
        adjList[x].removeNeighbor(adjList[y]);
        adjList[y].removeNeighbor(adjList[x]);
    }
 
    public Edge[] getAllEdges() {
        int totalEdges = 0;
        for (int i = 0; i < this.num_nodes; i++) {
            totalEdges += this.adjList[i].getNeighbors().size();
        }
 
        totalEdges /= 2;
 
        Edge[] edges = new Edge[totalEdges];
        int index = 0;
        for (int i = 0; i < this.num_nodes; i++) {
            for (int j = 0; j < this.adjList[i].getNeighbors().size(); j++) {
                int index1 = this.adjList[i].getIndex();
                int index2 = this.adjList[i].getNeighbors().get(j).node.getIndex();
                float weight = this.adjList[i].getNeighbors().get(j).weight;
                if(index2>index1)
                    edges[index++] = new Edge(index1, index2, weight);
            }
        }
 
        return edges;
    }
 
    private void sortEdges(Edge[] edges) {
        for (int i = 0; i < edges.length - 1; i++) {
            for (int j = i + 1; j < edges.length; j++) {
                if (edges[i].getWeight() > edges[j].getWeight()) {
                    Edge tmp = edges[i];
                    edges[i] = edges[j];
                    edges[j] = tmp;
                }
            }
        }
 
    }
 
    private void union(int u, int v, int[] vrski){
        int findWhat, replaceWith;
 
        if(u < v){
            findWhat = vrski[v];
            replaceWith = vrski[u];
        }
        else{
            findWhat = vrski[u];
            replaceWith = vrski[v];
        }
 
        for(int i=0; i<vrski.length; i++){
            if(vrski[i] == findWhat){
                vrski[i] = replaceWith;
            }
        }
    }
 
    List<Edge> kruskal() {
        int vrski[] = new int[this.num_nodes];
 
        Edge[] edges = this.getAllEdges();
        this.sortEdges(edges);
 
        for (int i = 0; i < this.num_nodes; i++)
            vrski[i] = i;
 
        List<Edge> mstEdges = new ArrayList<Edge>();
 
        for(int i=0; i<edges.length; i++){
            Edge e = edges[i];
 
            if(vrski[e.getFrom()] != vrski[e.getTo()]){
                mstEdges.add(e);
                this.union(e.getFrom(), e.getTo(), vrski);
            }
            
            if(mstEdges.size()==(this.num_nodes-1))
                break;
        }
 
        return mstEdges;
    }
 
    private Edge getMinimalEdge(boolean[] included){
        int index1 = Integer.MAX_VALUE, index2 = Integer.MAX_VALUE;
        float minweight = Float.MAX_VALUE;
 
        for(int i=0;i<this.num_nodes;i++){
            if(included[i]){
                Iterator<GraphNodeNeighbor<E>> it = adjList[i].getNeighbors().iterator();
                while(it.hasNext()){
                    GraphNodeNeighbor<E> pom = it.next();
                    if(!included[pom.node.getIndex()]&&pom.weight<minweight){
                        index1 = i;
                        index2 = pom.node.getIndex();
                        minweight = pom.weight;
                    }
                }
            }
        }
 
        if(minweight<Float.MAX_VALUE){
            Edge ret = new Edge(index1, index2, minweight);
            return ret;
        }
        return null;
    }
 
 
    List<Edge> prim(int start_index) {
        List<Edge> mstEdges = new ArrayList<Edge>();
 
        boolean included[] = new boolean[this.num_nodes];
        for(int i=0;i<this.num_nodes;i++)
            included[i]=false;
 
        included[start_index] = true;
 
        for(int i=0;i<this.num_nodes-1;i++){
            Edge e = this.getMinimalEdge(included);
            if(e==null){
                System.out.println("Ne mozat da se povrzat site jazli");
                break;
            }
            included[e.getFrom()] = included[e.getTo()] = true;
            mstEdges.add(e);
        }
 
        return mstEdges;
    }
 
    float[] dijkstra(int from) {
 
        float distance[] = new float[this.num_nodes];
        boolean finalno[] = new boolean[this.num_nodes];
        for (int i = 0; i < this.num_nodes; i++) {
            distance[i] = -1;
            finalno[i] = false;
        }
 
        finalno[from] = true;
        distance[from] = 0;
 
        for (int i = 1; i < this.num_nodes; i++) {
            Iterator<GraphNodeNeighbor<E>> it = adjList[from].getNeighbors().iterator();
            while (it.hasNext()) {
                GraphNodeNeighbor<E> pom = it.next();
                if (!finalno[pom.node.getIndex()]) {
                    if (distance[pom.node.getIndex()] <= 0) {
                        distance[pom.node.getIndex()] = distance[from]
                                + pom.weight;
                    }
                    else if (distance[from] + pom.weight < distance[pom.node
                            .getIndex()]) {
                        distance[pom.node.getIndex()] = distance[from]
                                + pom.weight;
                    }
                }
            }
 
            boolean minit = false;
            int k = -1;
            float minc = -1;
            for (int j = 0; j < this.num_nodes; j++) {
                if (!finalno[j] && distance[j] != -1) {
                    if (!minit) {
                        minc = distance[k = j]; 
                        minit = true; 
                    }else if (minc > distance[j] && distance[j] > 0)
                        minc = distance[k = j];
                }
            }
            finalno[from = k] = true;
        }
 
        return distance;
 
    }
 
    @Override
    public String toString() {
        String ret = new String();
        for (int i = 0; i < this.num_nodes; i++)
            ret += adjList[i] + "\n";
        return ret;
    }
 
}
 
class GraphNode<E> {
    private int index; 
    private E info;
    private LinkedList<GraphNodeNeighbor<E>> neighbors;
 
    public GraphNode(int index, E info) {
        this.index = index;
        this.info = info;
        neighbors = new LinkedList<GraphNodeNeighbor<E>>();
    }
 
    public boolean containsNeighbor(GraphNode<E> o){
        GraphNodeNeighbor<E> pom = new GraphNodeNeighbor<E>(o,0);
        return neighbors.contains(pom);
    }
 
    public void addNeighbor(GraphNode<E> o, float weight){
        GraphNodeNeighbor<E> pom = new GraphNodeNeighbor<E>(o,weight);
        neighbors.add(pom);
    }
 
    public void removeNeighbor(GraphNode<E> o){
        GraphNodeNeighbor<E> pom = new GraphNodeNeighbor<E>(o,0);
        if(neighbors.contains(pom))
            neighbors.remove(pom);
    }
 
    @Override
    public String toString() {
        String ret= "INFO:"+info+" SOSEDI:";
        for(int i=0;i<neighbors.size();i++)
            ret+="("+neighbors.get(i).node.info+","+neighbors.get(i).weight+") ";
        return ret;
 
    }
 
    public void updateNeighborWeight(GraphNode<E> o, float weight){
        Iterator<GraphNodeNeighbor<E>> i = neighbors.iterator();
        while(i.hasNext()){
            GraphNodeNeighbor<E> pom = i.next();
            if(pom.node.equals(o))
                pom.weight = weight;
        }
 
    }
 
    @Override
    public boolean equals(Object obj) {
        @SuppressWarnings("unchecked")
        GraphNode<E> pom = (GraphNode<E>)obj;
        return (pom.info.equals(this.info));
    }
 
    public int getIndex() {
        return index;
    }
 
    public void setIndex(int index) {
        this.index = index;
    }
 
    public E getInfo() {
        return info;
    }
 
    public void setInfo(E info) {
        this.info = info;
    }
 
    public LinkedList<GraphNodeNeighbor<E>> getNeighbors() {
        return neighbors;
    }
 
    public void setNeighbors(LinkedList<GraphNodeNeighbor<E>> neighbors) {
        this.neighbors = neighbors;
    }
 
 
 
}
 
 class GraphNodeNeighbor<E> {
    GraphNode<E> node;
    float weight;
 
    public GraphNodeNeighbor(GraphNode<E> node, float weight) {
        this.node = node;
        this.weight = weight;
    }
 
    public GraphNodeNeighbor(GraphNode<E> node) {
        this.node = node;
        this.weight = 0;
    }
 
    @Override
    public boolean equals(Object obj) {
        @SuppressWarnings("unchecked")
        GraphNodeNeighbor<E> pom = (GraphNodeNeighbor<E>)obj;
        return pom.node.equals(this.node);
    }
 
 
 
 
 
}
 
 class Edge{
     private int fromVertex, toVertex;
     private float weight;
     public Edge(int from, int to, float weight){
         this.fromVertex = from;
         this.toVertex = to;
         this.weight = weight;
     }
 
     public int getFrom(){
         return this.fromVertex;
     }
     public int getTo(){
         return this.toVertex;
     }
     public float getWeight(){
         return this.weight;
     }
 
     @Override
     public String toString() {
         return "("+fromVertex+","+toVertex+")="+weight+" ";
     }
 
 
 }
 
public class Hierarchy {
 
 
 
 
    public static void main(String[] args) throws IOException {
 
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(in.readLine());
        int num_edges = Integer.parseInt(in.readLine());
 
        Hashtable<String, Integer> vraboteni = new Hashtable<>(num_edges+1);
        Graph<Integer> g = new Graph<>(n);
 
        for(int i = 0; i < num_edges; i++){
            String line = in.readLine();
            String pom[] = line.split(" ");
 
            int index1 = Integer.parseInt(pom[0]);
            int index2 = Integer.parseInt(pom[2]);
 
            String covek1 = pom[1];
            String covek2 = pom[3];
            float tezina = Float.parseFloat(pom[4]);
 
            if(!vraboteni.contains(covek1)){
                vraboteni.put(covek1,index1);
            }
            if(!vraboteni.contains(pom[3])){
                vraboteni.put(covek2 , index2);
            }
            g.adjList[index1].setInfo(index1);
            g.adjList[index2].setInfo(index2);
            g.addEdge(index1,index2 , tezina);
 
        }
 
        String line = in.readLine();
        int index = vraboteni.get(line);
 
        List<Edge> lista = g.prim(index);
 
        float sum = 0;
        for(int i = 0; i < lista.size(); i++){
           sum += lista.get(i).getWeight();
        }
        System.out.println((int)sum);
 
    }
 
}
