import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;

interface Stack<E> {

    // The elements of the Stack are any kind of objects

    // Access methods:

    public boolean isEmpty ();
    	// Returns true only if the stack is empty.

    public E peek ();
    	// Returns the element on the top of the stack.

    // Transformation methods:

    public void clear ();
    	// Clears the stack.

    public void push (E x);
    	// Adds x on the top of the stack.

    public E pop ();
    	// Removes and returns the element on the top.
}

class ArrayStack<E> implements Stack<E> {
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack (int maxDepth) {
        // Creating new empty stack
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }


    public boolean isEmpty () {
         // Returns true only if the stack is empty.

        return (depth == 0);
    }


    public E peek () {
        // Returns the element on the top of the stack.
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth-1];
    }


    public void clear () {
        // Clears the stack.
        for (int i = 0; i < depth; i++)  elems[i] = null;
        depth = 0;
    }


    public void push (E x) {
        // Adds x on the top of the stack.
        elems[depth++] = x;
    }


    public E pop () {
        // Removes and returns the element on the top.
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
}

public class PostFixEvaluation {
	
	
    static int evaluatePostfix(char [] izraz, int n){
    	// Your code here
    	ArrayStack<Integer> intStack = new ArrayStack<Integer>(izraz.length);
        StringBuilder sb = new StringBuilder();
        
        for (int i=0; i<izraz.length; ++i) {
            if (Character.isDigit(izraz[i])) {
                if (Character.isDigit(izraz[i+1])) {
                    sb.append(izraz[i]);
                    continue;
                }else {
                    sb.append(izraz[i]);
                    intStack.push(Integer.parseInt(sb.toString()));
                    sb = new StringBuilder();
                }
            }else if (izraz[i] == '+') {
                int num1 = intStack.pop();
                int num2 = intStack.pop();
                intStack.push(num1 + num2);
            }else if (izraz[i] == '-') {
                int num1 = intStack.pop();
                int num2 = intStack.pop();
                intStack.push(num2 - num1);
            }else if (izraz[i] == '*') {
                int num1 = intStack.pop();
                int num2 = intStack.pop();
                intStack.push(num1 * num2);
            }else if (izraz[i] == '/') {
                int num1 = intStack.pop();
                int num2 = intStack.pop();
                intStack.push(num2 / num1);
            }
        }
        
    	return intStack.pop();
    }
	
	public static void main(String[] args) throws Exception{
          
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String expression = br.readLine();
        char exp[] = expression.toCharArray();
        
        int rez = evaluatePostfix(exp, exp.length);
        System.out.println(rez);
        
        br.close();

	}

}
