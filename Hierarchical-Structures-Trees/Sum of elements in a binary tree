#include<stdio.h>
#include<malloc.h>
#include<string.h>
#include<stdlib.h>
#define MEMCHECK(x) if(x==NULL) { printf("Nema memorija!\n"); exit(-1); }
#define LEFT 1
#define RIGHT 2

typedef int info_t;

typedef struct bNodeType {
    info_t info;
    struct bNodeType *left;
    struct bNodeType *right;
} bNode;

typedef struct bTreeType {
    bNode *root;
} bTree;

void initialize(bTree *t) {
    t->root = NULL;
}

void makeRoot(info_t elem, bTree *t) {
    t->root = (bNode *)malloc(sizeof(bNode));
    t->root->info = elem;
    t->root->left = NULL;
    t->root->right = NULL;
}

bNode* addChild(bNode *n, int where, info_t elem) {
    bNode *tmp = (bNode *)malloc(sizeof(bNode));
    tmp->info = elem;
    tmp->left = NULL;
    tmp->right = NULL;

    if (where == LEFT) {
        if (n->left != NULL)    // veke postoi element
            return NULL;
        n->left = tmp;
    } else {
        if (n->right != NULL)   // veke postoi element
            return NULL;
        n->right = tmp;
    }

    return tmp;
}

bNode* addChildNode(bNode *n, int where, bNode *tmp) {
    tmp->left = NULL;
    tmp->right = NULL;

    if (where == LEFT) {
        if (n->left != NULL)    // veke postoi element
            return NULL;
        n->left = tmp;
    } else {
        if (n->right != NULL)   // veke postoi element
            return NULL;
        n->right = tmp;
    }

    return tmp;
}


int main() {
    int i,j,k = -1;

    char words[1000][100];
    int N;
    int index;
    int parent;
    bNode **n = (bNode**)calloc(1000, sizeof(bNode*));
    char pc;
    scanf("%d", &N);

    for (i=0;i<1000;i++)
        n[i] = (bNode*)malloc(sizeof(bNode));

    bTree *t = (bTree*)malloc(sizeof(bTree));
    initialize(t);

    for (i=0;i<N;i++) {

        k++;
        scanf("%s", words[k]);
        index = atoi(words[k]);


        k++;
        scanf("%s", words[k]);
        n[index]->info = atoi(words[k]);

        k++;
        scanf("%s", words[k]);

        if (strcmp(words[k], "LEFT") == 0) {

            k++;
            scanf("%s", words[k]);
            parent = atoi(words[k]);
            addChildNode(n[parent], LEFT, n[index]);

        } else if (strcmp(words[k], "RIGHT") == 0) {
            k++;
            scanf("%s", words[k]);
            parent = atoi(words[k]);
            addChildNode(n[parent], RIGHT, n[index]);

        } else {
            t->root = n[index];
            n[index]->left = NULL;
            n[index]->right = NULL;
        }

    }
    
    int baranaVrednost;
    scanf("%d",&baranaVrednost);
    
    //Vasiot kod tuka
  
    return 0;
}
